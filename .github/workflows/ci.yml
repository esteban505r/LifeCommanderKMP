# .github/workflows/build-and-deploy.yml
name: build-and-deploy
on:
  push:
    branches: [ main ]
    tags: [ "v*" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      image: ${{ steps.meta.outputs.image }}
      tags:  ${{ steps.meta.outputs.tags }}
      version_tag: ${{ steps.pick.outputs.version_tag }}

    steps:
      - uses: actions/checkout@v4

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/oter-server
          tags: |
            type=ref,event=tag
            type=sha,format=short,prefix=sha-
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Pick deploy tag
        id: pick
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            echo "version_tag=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          else
            echo "version_tag=sha-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          fi

      - uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver: docker-container
          driver-opts: image=moby/buildkit:latest

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: server/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Find docker-compose.*yml and nginx.conf anywhere in the repo
      - name: Locate deploy files
        id: locate
        shell: bash
        run: |
          set -euo pipefail
          # find compose file (supports .yml or .yaml)
          COMPOSE_FILE="$(git ls-files | grep -E '(^|/)(docker-compose\.ya?ml)$' | head -n1 || true)"
          if [ -z "${COMPOSE_FILE}" ]; then
            echo "::error::No docker-compose.yml(yaml) found in repo. Put it in the repo or update the SCP paths."
            echo "Here is the repo tree (top-level):"
            ls -la
            exit 1
          fi
          # find nginx.conf (optional)
          NGINX_FILE="$(git ls-files | grep -E '(^|/)nginx\.conf$' | head -n1 || true)"

          echo "compose=${COMPOSE_FILE}"      >> "$GITHUB_OUTPUT"
          echo "nginx=${NGINX_FILE}"          >> "$GITHUB_OUTPUT"

          echo "Found compose: ${COMPOSE_FILE}"
          if [ -n "${NGINX_FILE}" ]; then
            echo "Found nginx:   ${NGINX_FILE}"
          else
            echo "No nginx.conf found; will skip copying it."
          fi

      - name: Copy compose to server (required)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: ${{ steps.locate.outputs.compose }}
          target: "~/oter"
          overwrite: true
          rm: true

      - name: Copy nginx.conf to server (optional)
        if: ${{ steps.locate.outputs.nginx != '' }}
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: ${{ steps.locate.outputs.nginx }}
          target: "~/oter"
          overwrite: true
          rm: true

      - name: SSH deploy
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -euo pipefail
            cd ~/oter
            echo "Contents of ~/oter:"; ls -la

            # Ensure Docker Compose exists (install if missing)
            if docker compose version >/dev/null 2>&1; then COMPOSE="docker compose";
            elif docker-compose version >/dev/null 2>&1; then COMPOSE="docker-compose";
            else
              if command -v apt-get >/dev/null 2>&1; then
                sudo apt-get update -y && sudo apt-get install -y docker-compose-plugin
                COMPOSE="docker compose"
              elif command -v dnf >/dev/null 2>&1; then
                sudo dnf install -y docker-compose-plugin
                COMPOSE="docker compose"
              else
                echo "Docker Compose not found and cannot auto-install"; exit 1
              fi
            fi

            docker network create edge || true

            # Login to GHCR only if secrets are set (needed for private images)
            if [ -n "${{ secrets.GHCR_READ_USER }}" ] && [ -n "${{ secrets.GHCR_READ_TOKEN }}" ]; then
              echo "${{ secrets.GHCR_READ_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_READ_USER }}" --password-stdin
            fi

            export IMAGE_TAG="${{ needs.build.outputs.version_tag }}"
            echo "Deploying tag: $IMAGE_TAG using: $COMPOSE"

            # Always pass the compose file we copied (works no matter where it lives originally)
            $COMPOSE -f docker-compose.yml pull
            $COMPOSE -f docker-compose.yml up -d

            docker image prune -f